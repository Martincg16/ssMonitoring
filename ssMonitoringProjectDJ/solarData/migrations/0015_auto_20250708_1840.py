# Generated by Django 5.2 on 2025-07-08 23:40

import django.db.models.deletion
from django.db import migrations, models


def migrate_proyecto_location_data(apps, schema_editor):
    """
    Migrate existing Proyecto ciudad/departamento text fields to ForeignKey relationships
    """
    Proyecto = apps.get_model('solarData', 'Proyecto')
    Ciudad = apps.get_model('solarData', 'Ciudad')
    Departamento = apps.get_model('solarData', 'Departamento')
    
    # Get the default "vacia" ciudad for fallback
    ciudad_vacia = Ciudad.objects.get(nombre_ciudad='vacia')
    
    # Process each existing Proyecto
    for proyecto in Proyecto.objects.all():
        if hasattr(proyecto, 'ciudad') and hasattr(proyecto, 'departamento'):
            ciudad_text = proyecto.ciudad.strip() if proyecto.ciudad else ''
            departamento_text = proyecto.departamento.strip() if proyecto.departamento else ''
            
            ciudad_obj = None
            
            # Try to find matching ciudad/departamento combination
            if ciudad_text and departamento_text:
                try:
                    # Look for exact departamento match first
                    departamento_obj = Departamento.objects.filter(
                        nombre_departamento__iexact=departamento_text
                    ).first()
                    
                    if departamento_obj:
                        # Look for ciudad in that departamento
                        ciudad_obj = Ciudad.objects.filter(
                            nombre_ciudad__iexact=ciudad_text,
                            id_departamento=departamento_obj
                        ).first()
                except Exception:
                    pass
            
            # If no match found, try just ciudad name across all departamentos
            if not ciudad_obj and ciudad_text:
                try:
                    ciudad_obj = Ciudad.objects.filter(
                        nombre_ciudad__iexact=ciudad_text
                    ).first()
                except Exception:
                    pass
            
            # Fallback to vacia if still no match
            if not ciudad_obj:
                ciudad_obj = ciudad_vacia
                print(f"⚠️  Proyecto '{proyecto.dealname}' (ciudad: '{ciudad_text}', departamento: '{departamento_text}') → usando 'vacia' como fallback")
            else:
                print(f"✅ Proyecto '{proyecto.dealname}' → {ciudad_obj.nombre_ciudad}, {ciudad_obj.id_departamento.nombre_departamento}")
            
            # Set the new ForeignKey field
            proyecto.id_ciudad = ciudad_obj
            proyecto.save(update_fields=['id_ciudad'])


def reverse_migrate_proyecto_location_data(apps, schema_editor):
    """
    Reverse migration: copy ForeignKey data back to text fields
    """
    Proyecto = apps.get_model('solarData', 'Proyecto')
    
    for proyecto in Proyecto.objects.all():
        if proyecto.id_ciudad:
            proyecto.ciudad = proyecto.id_ciudad.nombre_ciudad
            proyecto.departamento = proyecto.id_ciudad.id_departamento.nombre_departamento
        else:
            proyecto.ciudad = ''
            proyecto.departamento = ''
        proyecto.save(update_fields=['ciudad', 'departamento'])


class Migration(migrations.Migration):

    dependencies = [
        ('solarData', '0014_departamento_ciudad'),
    ]

    operations = [
        # Step 1: Add new field as nullable
        migrations.AddField(
            model_name='proyecto',
            name='id_ciudad',
            field=models.ForeignKey(
                null=True, 
                blank=True, 
                on_delete=django.db.models.deletion.CASCADE, 
                to='solarData.ciudad', 
                verbose_name='ciudad'
            ),
        ),
        
        # Step 2: Migrate data from old fields to new field
        migrations.RunPython(
            migrate_proyecto_location_data,
            reverse_migrate_proyecto_location_data
        ),
        
        # Step 3: Make new field required
        migrations.AlterField(
            model_name='proyecto',
            name='id_ciudad',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, 
                to='solarData.ciudad', 
                verbose_name='ciudad'
            ),
        ),
        
        # Step 4: Remove old fields
        migrations.RemoveField(
            model_name='proyecto',
            name='ciudad',
        ),
        migrations.RemoveField(
            model_name='proyecto',
            name='departamento',
        ),
    ]
