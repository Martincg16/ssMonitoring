"""
Django settings for ssMonitoringProjectDJ project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load .env file from the project root (one level up from Django project)
load_dotenv(BASE_DIR.parent / '.env')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-3g1p-1hqh--r6qna3a#_@hsu!ghp(u=^0jfpxtn75ce9g&8d8e')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_crontab',
    "solarData",
    "solarDataFetch",
    "solarDataStore",
    "solarDataNewSystem",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ssMonitoringProjectDJ.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ssMonitoringProjectDJ.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME', 'ssmonitoring'),
        'USER': os.environ.get('DB_USER', 'ssuser'),
        'PASSWORD': os.environ.get('DB_PASSWORD', 'sspassword'),
        'HOST': os.environ.get('DB_HOST', 'localhost'),
        'PORT': os.environ.get('DB_PORT', '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Bogota'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ]
}

# Django Logging Configuration for CloudWatch
# This sets up organized logging that writes to separate files for each fetcher
LOGGING = {
    # Always use version 1 for Django logging configuration
    'version': 1,
    
    # Keep Django's existing loggers (don't disable them)
    'disable_existing_loggers': False,
    
    # FORMATTERS: Define how log messages should look
    'formatters': {
        'fetcher_format': {
            # Format: "2025-01-15 10:30:15 INFO solarDataFetch Starting Huawei login attempt"
            'format': '{asctime} {levelname} solarDataFetch {message}',
            'style': '{',  # Use new-style string formatting
        },
        'general_format': {
            # Format: "2025-01-15 10:30:15 INFO django General application message"
            'format': '{asctime} {levelname} {name} {message}',
            'style': '{',  # Use new-style string formatting
        },
    },
    
    # HANDLERS: Define where logs should go
    'handlers': {
        # HUAWEI FETCHER HANDLER: Logs for Huawei operations
        'huawei_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR.parent / 'logs' / 'huawei_fetcher.log',
            'formatter': 'fetcher_format',
        },
        
        # SOLIS FETCHER HANDLER: Logs for Solis operations  
        'solis_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR.parent / 'logs' / 'solis_fetcher.log',
            'formatter': 'fetcher_format',
        },
        
        # HUAWEI STORE HANDLER: Logs for Huawei CRUD operations
        'huawei_store_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR.parent / 'logs' / 'huawei_store.log',
            'formatter': 'fetcher_format',
        },
        
        # SOLIS STORE HANDLER: Logs for Solis CRUD operations  
        'solis_store_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR.parent / 'logs' / 'solis_store.log',
            'formatter': 'fetcher_format',
        },
        
        # HUAWEI NEW SYSTEM HANDLER: Logs for Huawei registration operations
        'huawei_newsystem_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR.parent / 'logs' / 'huawei_newsystem.log',
            'formatter': 'fetcher_format',
        },
        
        # SOLIS NEW SYSTEM HANDLER: Logs for Solis registration operations
        'solis_newsystem_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR.parent / 'logs' / 'solis_newsystem.log',
            'formatter': 'fetcher_format',
        },
        
        # GENERAL DJANGO HANDLER: Other Django application logs
        'django_general_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR.parent / 'logs' / 'django_general.log',
            'formatter': 'general_format',
        },
        
        # MANAGEMENT COMMANDS HANDLER: Dedicated handler for command logs
        'commands_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR.parent / 'logs' / 'management_commands.log',
            'formatter': 'general_format',
        },
        
        # CONSOLE HANDLER: Prints logs to terminal/console (for debugging)
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'general_format',
        },
        
        # EMAIL ALERT HANDLER: Sends emails for ERROR and CRITICAL logs
        'email_alert': {
            'level': 'ERROR',
            'class': 'solarData.email_handler.EmailAlertHandler',
            'formatter': 'general_format',
        },
    },
    
    # LOGGERS: Define which code can log and how
    'loggers': {
        # Logger for Huawei fetcher operations
        'huawei_fetcher': {
            'handlers': ['huawei_file', 'console', 'email_alert'],
            'level': 'INFO',
            'propagate': False,
        },
        
        # Logger for Solis fetcher operations
        'solis_fetcher': {
            'handlers': ['solis_file', 'console', 'email_alert'],
            'level': 'INFO',
            'propagate': False,
        },
        
        # Logger for Huawei CRUD operations
        'huawei_store': {
            'handlers': ['huawei_store_file', 'console', 'email_alert'],
            'level': 'INFO',
            'propagate': False,
        },
        
        # Logger for Solis CRUD operations
        'solis_store': {
            'handlers': ['solis_store_file', 'console', 'email_alert'],
            'level': 'INFO',
            'propagate': False,
        },
        
        # Logger for Huawei registration operations
        'huawei_newsystem': {
            'handlers': ['huawei_newsystem_file', 'console', 'email_alert'],
            'level': 'INFO',
            'propagate': False,
        },
        
        # Logger for Solis registration operations
        'solis_newsystem': {
            'handlers': ['solis_newsystem_file', 'console', 'email_alert'],
            'level': 'INFO',
            'propagate': False,
        },
        
        # Logger for management commands
        'management_commands': {
            'handlers': ['commands_file', 'console', 'email_alert'],
            'level': 'INFO',
            'propagate': False,
        },
        
        # General Django application logger
        'django': {
            'handlers': ['django_general_file', 'console'],
            'level': 'WARNING',  # Only warnings and errors for general Django
            'propagate': False,
        },
    },
}

# LOGGING LEVELS (from lowest to highest priority):
# DEBUG    - Detailed diagnostic info (usually only when diagnosing problems)
# INFO     - General information about program execution
# WARNING  - Something unexpected happened, but program still works
# ERROR    - A serious problem occurred, some function failed
# CRITICAL - A very serious error occurred, program might stop

# Usage in your code:
# import logging
# logger = logging.getLogger('huawei_fetcher')
# logger.debug("Detailed debug info")      # Won't show (below INFO level)
# logger.info("General information")       # Will show ✅
# logger.warning("Something unexpected")   # Will show ✅
# logger.error("An error occurred")        # Will show ✅
# logger.critical("Critical failure")      # Will show ✅

# Django-Crontab Configuration
CRONJOBS = [
    # Run at 3:00 AM Colombian time (now using Colombian timezone)
    # Format: minute hour day month day_of_week
    ('0 3 * * *', 'django.core.management.call_command', ['collect_all_gen', '--skip-errors']),
]

# Optional: Configure command prefix for virtual environment
CRONTAB_COMMAND_PREFIX = 'cd /opt/solar-monitoring/ssMonitoringProjectDJ && source /opt/solar-monitoring/venv/bin/activate &&'

# Optional: Prevent multiple instances from running
CRONTAB_LOCK_JOBS = True

# Email Configuration (Gmail or AWS SES)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# Auto-detect Gmail vs AWS SES based on FROM email address or force Gmail
from_email = os.environ.get('ALERT_FROM_EMAIL', '')
force_gmail = os.environ.get('FORCE_GMAIL_SMTP', 'false').lower() == 'true'

if from_email.endswith('@gmail.com') or force_gmail:
    # Gmail configuration
    EMAIL_HOST = 'smtp.gmail.com'
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
else:
    # AWS SES configuration  
    EMAIL_HOST = 'email-smtp.us-east-1.amazonaws.com'  # Change region if needed
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True

EMAIL_HOST_USER = os.environ.get('AWS_SES_SMTP_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('AWS_SES_SMTP_PASSWORD', '')
DEFAULT_FROM_EMAIL = from_email

# Email Alert Recipients (comma-separated list)
ALERT_EMAIL_RECIPIENTS = [email.strip() for email in os.environ.get('ALERT_EMAIL_RECIPIENTS', '').split(',') if email.strip()]
